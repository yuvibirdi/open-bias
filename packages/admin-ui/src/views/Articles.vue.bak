<template>
  <CRow>
    <CCol :xs="12">
      <CCard class="mb-4">
        <CCardHeader>
          <strong>Articles Management</strong>
          <div class="float-end">
            <CButtonGroup role="group">
              <CButton
                color="outline-secondary"
                :active="selectedBias === null"
                @click="filterByBias(null)"
              >
                All
              </CButton>
              <CButton
                color="outline-primary"
                :active="selectedBias === 1"
                @click="filterByBias(1)"
              >
                Left
              </CButton>
              <CButton
                color="outline-success"
                :active="selectedBias === 2"
                @click="filterByBias(2)"
              >
                Center
              </CButton>
              <CButton
                color="outline-danger"
                :active="selectedBias === 3"
                @click="filterByBias(3)"
              >
                Right
              </CButton>
            </CButtonGroup>
          </div>
        </CCardHeader>
        <CCardBody>
          <div v-if="loading" class="text-center py-4">
            <CSpinner />
            <p class="mt-2">Loading articles...</p>
          </div>
          
          <div v-else-if="error" class="alert alert-danger">
            {{ error }}
          </div>
          
          <CTable v-else hover responsive>
            <CTableHead>
              <CTableRow>
                <CTableHeaderCell>Title</CTableHeaderCell>
                <CTableHeaderCell>Source</CTableHeaderCell>
                <CTableHeaderCell>Bias</CTableHeaderCell>
                <CTableHeaderCell>Published</CTableHeaderCell>
                <CTableHeaderCell>Actions</CTableHeaderCell>
              </CTableRow>
            </CTableHead>
            <CTableBody>
              <CTableRow v-for="article in articles" :key="article.id">
                <CTableDataCell>
                  <strong>{{ article.title }}</strong>
                  <div v-if="article.summary" class="text-muted small">
                    {{ article.summary.substring(0, 100) }}...
                  </div>
                </CTableDataCell>
                <CTableDataCell>{{ article.sourceName }}</CTableDataCell>
                <CTableDataCell>
                  <CBadge :color="getBiasColor(article.bias)">
                    {{ getBiasLabel(article.bias) }}
                  </CBadge>
                </CTableDataCell>
                <CTableDataCell>{{ formatDate(article.published) }}</CTableDataCell>
                <CTableDataCell>
                  <CButton
                    color="primary"
                    variant="outline"
                    size="sm"
                    :href="article.link"
                    target="_blank"
                  >
                    View
                  </CButton>
                </CTableDataCell>
              </CTableRow>
            </CTableBody>
          </CTable>
          
          <div v-if="!loading && articles.length === 0" class="text-center py-4">
            <p class="text-muted">No articles found.</p>
          </div>
        </CCardBody>
      </CCard>
    </CCol>
  </CRow>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import { getArticles, type Article } from '@/composables/useApi'

const articles = ref<Article[]>([])
const loading = ref(true)
const error = ref<string | null>(null)
const selectedBias = ref<number | null>(null)

const getBiasColor = (bias: number) => {
  switch (bias) {
    case 1: return 'primary'
    case 2: return 'success'
    case 3: return 'danger'
    default: return 'secondary'
  }
}

const getBiasLabel = (bias: number) => {
  switch (bias) {
    case 1: return 'Left'
    case 2: return 'Center'
    case 3: return 'Right'
    default: return 'Unknown'
  }
}

const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString()
}

const loadArticles = async (bias?: number) => {
  loading.value = true
  error.value = null
  
  try {
    const params: { limit?: number; bias?: number } = { limit: 50 }
    if (bias !== undefined) {
      params.bias = bias
    }
    
    const response = await getArticles(params)
    articles.value = response.articles
  } catch (err) {
    error.value = (err as Error).message
  } finally {
    loading.value = false
  }
}

const filterByBias = (bias: number | null) => {
  selectedBias.value = bias
  loadArticles(bias || undefined)
}

onMounted(() => {
  loadArticles()
})
</script>
